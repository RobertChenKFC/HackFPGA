function Screen.init 2
push constant 1
neg
pop static 0
push constant 16
call Array.new 1
pop static 1
push constant 16
call Array.new 1
pop static 2
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE12
push local 0
push constant 16
lt
not
if-goto END_WHILE12
push local 1
push static 1
push local 0
add
pop pointer 1
pop that 0
push local 1
not
push static 2
push local 0
add
pop pointer 1
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE12
label END_WHILE12
push constant 16384
pop static 3
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label WHILE13
push local 0
push constant 8192
lt
not
if-goto END_WHILE13
push constant 0
push static 3
push local 0
add
pop pointer 1
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE13
label END_WHILE13
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 3
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
not
if-goto END_IF39
push constant 7
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF39
push argument 0
push constant 16
call Math.divide 2
pop local 0
push argument 0
push local 0
push constant 16
call Math.multiply 2
sub
pop local 1
push argument 1
push constant 32
call Math.multiply 2
push local 0
add
pop local 2
push static 0
not
if-goto ELSE40
push static 3
push local 2
add
pop pointer 1
push that 0
push static 1
push local 1
add
pop pointer 1
push that 0
or
push static 3
push local 2
add
pop pointer 1
pop that 0
goto END_IF40
label ELSE40
push static 3
push local 2
add
pop pointer 1
push that 0
push static 2
push local 1
add
pop pointer 1
push that 0
and
push static 3
push local 2
add
pop pointer 1
pop that 0
label END_IF40
push constant 0
return
function Screen.drawLine 8
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
push argument 2
push constant 0
lt
or
push argument 2
push constant 511
gt
or
push argument 3
push constant 0
lt
or
push argument 3
push constant 255
gt
or
not
if-goto END_IF41
push constant 8
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF41
push argument 2
push argument 0
sub
pop local 1
push argument 3
push argument 1
sub
pop local 2
push constant 0
pop local 7
push argument 1
push argument 3
eq
not
if-goto END_IF42
push local 1
push constant 0
lt
not
if-goto END_IF43
push argument 0
pop local 0
push argument 2
pop argument 0
push local 0
pop argument 2
label END_IF43
push argument 0
push constant 16
call Math.divide 2
pop local 3
push argument 0
push local 3
push constant 16
call Math.multiply 2
sub
pop local 4
push argument 2
push constant 16
call Math.divide 2
pop local 5
push local 3
push local 5
eq
not
if-goto ELSE44
push argument 2
push local 5
push constant 16
call Math.multiply 2
sub
pop local 6
goto END_IF44
label ELSE44
push constant 16
pop local 6
label END_IF44
push argument 1
push constant 32
call Math.multiply 2
push local 3
add
pop local 0
label WHILE14
push local 4
push constant 0
eq
push local 4
push local 6
eq
or
not
not
if-goto END_WHILE14
push static 0
not
if-goto ELSE45
push static 3
push local 0
add
pop pointer 1
push that 0
push static 1
push local 4
add
pop pointer 1
push that 0
or
push static 3
push local 0
add
pop pointer 1
pop that 0
goto END_IF45
label ELSE45
push static 3
push local 0
add
pop pointer 1
push that 0
push static 2
push local 4
add
pop pointer 1
push that 0
and
push static 3
push local 0
add
pop pointer 1
pop that 0
label END_IF45
push local 4
push constant 1
add
pop local 4
goto WHILE14
label END_WHILE14
push local 3
push local 5
eq
not
if-goto END_IF46
push constant 0
return
label END_IF46
push local 4
push constant 16
eq
not
if-goto END_IF47
push local 3
push constant 1
add
pop local 3
push local 0
push constant 1
add
pop local 0
label END_IF47
push argument 2
push local 5
push constant 16
call Math.multiply 2
sub
pop local 6
label WHILE15
push local 3
push local 5
lt
not
if-goto END_WHILE15
push static 0
not
if-goto ELSE48
push constant 1
neg
push static 3
push local 0
add
pop pointer 1
pop that 0
goto END_IF48
label ELSE48
push constant 0
push static 3
push local 0
add
pop pointer 1
pop that 0
label END_IF48
push local 0
push constant 1
add
pop local 0
push local 3
push constant 1
add
pop local 3
goto WHILE15
label END_WHILE15
push constant 0
pop local 4
label WHILE16
push local 4
push local 6
gt
not
not
if-goto END_WHILE16
push static 0
not
if-goto ELSE49
push static 3
push local 0
add
pop pointer 1
push that 0
push static 1
push local 4
add
pop pointer 1
push that 0
or
push static 3
push local 0
add
pop pointer 1
pop that 0
goto END_IF49
label ELSE49
push static 3
push local 0
add
pop pointer 1
push that 0
push static 2
push local 4
add
pop pointer 1
push that 0
and
push static 3
push local 0
add
pop pointer 1
pop that 0
label END_IF49
push local 4
push constant 1
add
pop local 4
goto WHILE16
label END_WHILE16
push constant 0
return
label END_IF42
push argument 0
push argument 2
eq
not
if-goto END_IF50
push local 2
push constant 0
lt
not
if-goto END_IF51
push argument 1
pop local 0
push argument 3
pop argument 1
push local 0
pop argument 3
label END_IF51
push argument 0
push constant 16
call Math.divide 2
pop local 3
push argument 0
push local 3
push constant 16
call Math.multiply 2
sub
pop local 4
push argument 1
push constant 32
call Math.multiply 2
push local 3
add
pop local 0
push static 0
not
if-goto ELSE52
push static 1
push local 4
add
pop pointer 1
push that 0
pop local 5
label WHILE17
push argument 1
push argument 3
gt
not
not
if-goto END_WHILE17
push static 3
push local 0
add
pop pointer 1
push that 0
push local 5
or
push static 3
push local 0
add
pop pointer 1
pop that 0
push argument 1
push constant 1
add
pop argument 1
push local 0
push constant 32
add
pop local 0
goto WHILE17
label END_WHILE17
goto END_IF52
label ELSE52
push static 2
push local 4
add
pop pointer 1
push that 0
pop local 5
label WHILE18
push argument 1
push argument 3
gt
not
not
if-goto END_WHILE18
push static 3
push local 0
add
pop pointer 1
push that 0
push local 5
and
push static 3
push local 0
add
pop pointer 1
pop that 0
push argument 1
push constant 1
add
pop argument 1
push local 0
push constant 32
add
pop local 0
goto WHILE18
label END_WHILE18
label END_IF52
push constant 0
return
label END_IF50
push local 1
push constant 0
lt
not
if-goto END_IF53
push argument 2
pop argument 0
push argument 3
pop argument 1
push local 1
neg
pop local 1
push local 2
neg
pop local 2
label END_IF53
push constant 0
pop local 3
push constant 0
pop local 4
push constant 0
pop local 7
push local 2
push constant 0
gt
not
if-goto ELSE54
label WHILE19
push local 3
push local 1
gt
push local 4
push local 2
gt
or
not
not
if-goto END_WHILE19
push argument 0
push local 3
add
push argument 1
push local 4
add
call Screen.drawPixel 2
pop temp 0
push local 7
push constant 0
lt
not
if-goto ELSE55
push local 4
push constant 1
add
pop local 4
push local 7
push local 1
add
pop local 7
goto END_IF55
label ELSE55
push local 3
push constant 1
add
pop local 3
push local 7
push local 2
sub
pop local 7
label END_IF55
goto WHILE19
label END_WHILE19
goto END_IF54
label ELSE54
push local 2
neg
pop local 2
label WHILE20
push local 3
push local 1
gt
push local 4
push local 2
gt
or
not
not
if-goto END_WHILE20
push argument 0
push local 3
add
push argument 1
push local 4
add
call Screen.drawPixel 2
pop temp 0
push local 7
push constant 0
lt
not
if-goto ELSE56
push local 3
push constant 1
add
pop local 3
push local 7
push local 2
add
pop local 7
goto END_IF56
label ELSE56
push local 4
push constant 1
sub
pop local 4
push local 7
push local 1
sub
pop local 7
label END_IF56
goto WHILE20
label END_WHILE20
label END_IF54
push constant 0
return
function Screen.drawRectangle 2
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
push argument 2
push constant 0
lt
or
push argument 2
push constant 511
gt
or
push argument 3
push constant 0
lt
or
push argument 3
push constant 255
gt
or
not
if-goto END_IF57
push constant 9
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF57
push argument 2
push argument 0
sub
pop local 0
push local 0
push constant 0
lt
not
if-goto END_IF58
push local 0
neg
pop local 0
label END_IF58
push argument 3
push argument 1
sub
pop local 1
push local 1
push constant 0
lt
not
if-goto END_IF59
push local 1
neg
pop local 1
label END_IF59
push local 1
push local 1
add
pop local 1
push local 1
push local 1
add
pop local 1
push local 1
push local 1
add
pop local 1
push local 0
push local 1
gt
not
if-goto ELSE60
push argument 1
push argument 3
lt
not
if-goto ELSE61
push constant 1
pop local 1
push argument 3
push constant 1
add
pop argument 3
goto END_IF61
label ELSE61
push constant 1
neg
pop local 1
push argument 3
push constant 1
sub
pop argument 3
label END_IF61
label WHILE21
push argument 1
push argument 3
eq
not
not
if-goto END_WHILE21
push argument 0
push argument 1
push argument 2
push argument 1
call Screen.drawLine 4
pop temp 0
push argument 1
push local 1
add
pop argument 1
goto WHILE21
label END_WHILE21
goto END_IF60
label ELSE60
push argument 0
push argument 2
lt
not
if-goto ELSE62
push constant 1
pop local 0
push argument 2
push constant 1
add
pop argument 2
goto END_IF62
label ELSE62
push constant 1
neg
pop local 0
push argument 2
push constant 1
sub
pop argument 2
label END_IF62
label WHILE22
push argument 0
push argument 2
eq
not
not
if-goto END_WHILE22
push argument 0
push argument 1
push argument 0
push argument 3
call Screen.drawLine 4
pop temp 0
push argument 0
push local 0
add
pop argument 0
goto WHILE22
label END_WHILE22
label END_IF60
push constant 0
return
function Screen.drawCircle 3
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
not
if-goto END_IF63
push constant 12
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF63
push argument 2
push constant 0
lt
push argument 2
push constant 181
gt
or
not
if-goto END_IF64
push constant 13
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF64
push argument 2
push constant 0
eq
not
if-goto END_IF65
push constant 0
return
label END_IF65
push argument 2
pop local 0
push constant 0
pop local 1
push constant 1
push argument 2
sub
pop local 2
push argument 0
push local 0
sub
push argument 1
push local 1
sub
push argument 0
push local 0
add
push argument 1
push local 1
sub
call Screen.drawLine 4
pop temp 0
push argument 0
push local 0
sub
push argument 1
push local 1
add
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawLine 4
pop temp 0
label WHILE23
push local 0
push local 1
gt
not
if-goto END_WHILE23
push local 1
push constant 1
add
pop local 1
push local 2
push constant 0
gt
not
if-goto ELSE66
push local 0
push constant 1
sub
pop local 0
push local 2
push local 1
add
push local 1
add
push local 0
sub
push local 0
sub
push constant 1
add
pop local 2
goto END_IF66
label ELSE66
push local 2
push local 1
add
push local 1
add
push constant 1
add
pop local 2
label END_IF66
push argument 0
push local 0
sub
push argument 1
push local 1
sub
push argument 0
push local 0
add
push argument 1
push local 1
sub
call Screen.drawLine 4
pop temp 0
push argument 0
push local 0
sub
push argument 1
push local 1
add
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawLine 4
pop temp 0
push argument 0
push local 1
sub
push argument 1
push local 0
sub
push argument 0
push local 1
add
push argument 1
push local 0
sub
call Screen.drawLine 4
pop temp 0
push argument 0
push local 1
sub
push argument 1
push local 0
add
push argument 0
push local 1
add
push argument 1
push local 0
add
call Screen.drawLine 4
pop temp 0
goto WHILE23
label END_WHILE23
push constant 0
return
