// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static boolean color_;
    static Array setMask_, clearMask_;
    static Array screen_;

    /** Initializes the Screen. */
    function void init() {
        var int i, mask;
        let color_ = true;
        let setMask_ = Array.new(16);
        let clearMask_ = Array.new(16);
        let i = 0;
        let mask = 1;
        while (i < 16) {
            let setMask_[i] = mask;
            let clearMask_[i] = ~mask;
            let mask = mask + mask;
            let i = i + 1;
        }
        let screen_ = 16384;
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int i;
        let i = 0;
        while (i < 8192) {
            let screen_[i] = 0;
            let i = i + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color_ = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int col, bit, pos;
        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
            do Sys.error(7);
            return;
        }
        let col = x / 16;
        let bit = x - (col * 16);
        let pos = y * 32 + col;     // 512 / 16 = 32
        if (color_) {
            let screen_[pos] = screen_[pos] | setMask_[bit];
        } else {
            let screen_[pos] = screen_[pos] & clearMask_[bit];
        }
        return;
    }

    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    function void drawLine(int x1, int y1, int x2, int y2) {
        var int t;
        var int dx, dy, a, b, c, d, diff;

        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255) |
            (x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)) {
            do Sys.error(8);
            return;
        }

        let dx = x2 - x1;
        let dy = y2 - y1;
        let diff = 0;
        if (y1 = y2) {
            // Horizontal line
            if (dx < 0) {
                let t = x1;
                let x1 = x2;
                let x2 = t;
            }
            let a = x1 / 16;
            let b = x1 - (a * 16);
            let c = x2 / 16;
            if (a = c) {
                let d = x2 - (c * 16);
            } else {
                let d = 16;
            }
            let t = y1 * 32 + a;     // 512 / 16 = 32
            while (~((b = 0) | (b = d))) {
                if (color_) {
                    let screen_[t] = screen_[t] | setMask_[b];
                } else {
                    let screen_[t] = screen_[t] & clearMask_[b];
                }
                let b = b + 1;
            }
            if (a = c) {
                return;
            }
            if (b = 16) {
                let a = a + 1;
                let t = t + 1;
            }
            let d = x2 - (c * 16);
            while (a < c) {
                if (color_) {
                    let screen_[t] = -1;
                } else {
                    let screen_[t] = 0;
                }
                let t = t + 1;
                let a = a + 1;
            }
            let b = 0;
            while (~(b > d)) {
                if (color_) {
                    let screen_[t] = screen_[t] | setMask_[b];
                } else {
                    let screen_[t] = screen_[t] & clearMask_[b];
                }
                let b = b + 1;
            }
            return;
        }
        if (x1 = x2) {
            // Vertical line
            if (dy < 0) {
                let t = y1;
                let y1 = y2;
                let y2 = t;
            }
            let a = x1 / 16;
            let b = x1 - (a * 16);
            let t = y1 * 32 + a;
            if (color_) {
                let c = setMask_[b];
                while (~(y1 > y2)) {
                    let screen_[t] = screen_[t] | c;
                    let y1 = y1 + 1;
                    let t = t + 32;
                }
            } else {
                let c = clearMask_[b];
                while (~(y1 > y2)) {
                    let screen_[t] = screen_[t] & c;
                    let y1 = y1 + 1;
                    let t = t + 32;
                }
            }
            return;
        }

        if (dx < 0) {
            let x1 = x2;
            let y1 = y2;
            let dx = -dx;
            let dy = -dy;
        }

        let a = 0;
        let b = 0;
        let diff = 0;
        if (dy > 0) {
            // Top left - bottom right line
            while (~((a > dx) | (b > dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let b = b + 1;
                    let diff = diff + dx;
                } else {
                    let a = a + 1;
                    let diff = diff - dy;
                }
            }
        } else {
            // Bottom right - top left line
            let dy = -dy;
            while (~((a > dx) | (b > dy))) {
                do Screen.drawPixel(x1 + a, y1 + b);
                if (diff < 0) {
                    let a = a + 1;
                    let diff = diff + dy;
                } else {
                    let b = b - 1;
                    let diff = diff - dx;
                }
            }
        }
        return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int dx, dy;

        if ((x1 < 0) | (x1 > 511) | (y1 < 0) | (y1 > 255) |
            (x2 < 0) | (x2 > 511) | (y2 < 0) | (y2 > 255)) {
            do Sys.error(9);
            return;
        }

        let dx = x2 - x1;
        if (dx < 0) {
            let dx = -dx;
        }

        let dy = y2 - y1;
        if (dy < 0) {
            let dy = -dy;
        }
        let dy = dy + dy;
        let dy = dy + dy;
        let dy = dy + dy;       // dy * 8 since horizontal lines has potential
                                // speedup of 8 times

        if (dx > dy) {
            // Draw horizontal lines
            if (y1 < y2) {
                let dy = 1;
                let y2 = y2 + 1;
            } else {
                let dy = -1;
                let y2 = y2 - 1;
            }
            while (~(y1 = y2)) {
                do Screen.drawLine(x1, y1, x2, y1);
                let y1 = y1 + dy;
            }
        } else {
            // Draw vertical lines
            if (x1 < x2) {
                let dx = 1;
                let x2 = x2 + 1;
            } else {
                let dx = -1;
                let x2 = x2 - 1;
            }
            while (~(x1 = x2)) {
                do Screen.drawLine(x1, y1, x1, y2);
                let x1 = x1 + dx;
            }
        }

        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    function void drawCircle(int x, int y, int r) {
        // Using the "Mid-Point Circle Drawing Algorithm"
        // Reference: https://www.geeksforgeeks.org/mid-point-circle-drawing-algorithm/
        var int xk, yk, pk;

        if ((x < 0) | (x > 511) | (y < 0) | (y > 255)) {
            do Sys.error(12);
            return;
        }
        if ((r < 0) | (r > 181)) {
            do Sys.error(13);
            return;
        }

        if (r = 0) {
            return;
        }

        let xk = r;
        let yk = 0;
        let pk = 1 - r;
        do Screen.drawLine(x - xk, y - yk, x + xk, y - yk);
        do Screen.drawLine(x - xk, y + yk, x + xk, y + yk);
        while (xk > yk) {
            let yk = yk + 1;
            if (pk > 0) {
                let xk = xk - 1;
                let pk = pk + yk + yk - xk - xk + 1;
            } else {
                let pk = pk + yk + yk + 1;
            }
            do Screen.drawLine(x - xk, y - yk, x + xk, y - yk);
            do Screen.drawLine(x - xk, y + yk, x + xk, y + yk);
            do Screen.drawLine(x - yk, y - xk, x + yk, y - xk);
            do Screen.drawLine(x - yk, y + xk, x + yk, y + xk);
        }
        return;
    }
}
