// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram_;
    static Array free_;

    /** Initializes the class. */
    function void init() {
        let ram_ = 0;
        let free_ = 2048;
        let free_[0] = 14436; // maxiumum free block 16384 - 2048
        let free_[1] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram_[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram_[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int allocSize;
        var int diff, cur, prev;
        var bool continue;
        var int bestDiff, best, bestPrev;
        var int ret;

        if (size < 0) {
            do Sys.error(5);
            return 0;
        }
        if (free_ = 0) {
            do Sys.error(6);
            return 0;
        }

        let allocSize = size + 1;
        let cur = free_;
        let prev = 0;
        let bestDiff = 14437; // maximum free block 16384 - 2048
        let continue = true;

        while ((~(cur = 0)) & continue) {
            let diff = cur[0] - allocSize;
            if ((~(diff < 0)) & (diff < bestDiff)) {
                let bestDiff = diff;
                let best = cur;
                let bestPrev = prev;
                if (~(diff > 1)) {
                    let continue = false;
                }
            }
            let prev = cur;
            let cur = cur[1];
        }

        if (bestDiff = 14437) {
            do Sys.error(6);
            return 0;
        }

        if (bestDiff > 1) {
            // Split block then return
            let best[0] = best[0] - allocSize;
            let ret = best + bestDiff + 1;
            let ret[-1] = allocSize;
        } else {
            // Remove entire block
            if (bestPrev = 0) {
                let free_ = best[0];
            } else {
                let bestPrev[0] = best[0];
            }
            let ret = best + 1;
        }

        return ret;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
        let o[0] = free_;
        let free_ = o - 1;
        return;
    }
}
