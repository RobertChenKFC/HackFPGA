// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */
class Memory {
    static Array ram_;
    static Array free_;

    /** Initializes the class. */
    function void init() {
        let ram_ = 0;
        let free_ = 2048;
        let free_[0] = 14436; // maxiumum free block 16384 - 2048
        let free_[1] = 0;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram_[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram_[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int allocSize, prev, cur, curSize, diff, curDiff, node;
        var bool notDone;

        if (size < 0) {
            do Sys.error(5);
            return;
        }

        let allocSize = size + 1;
        let prev = 0;
        let cur = free_;
        let diff = 14436; // maximum difference 16384 - 2048
        let notDone = true;
        while ((~(cur = 0)) && notDone) {
            let curSize = free_[cur - 1];
            let curDiff = curSize - size;
            if ((~(curDiff < 0)) && ((match = 0) || (curDiff < diff))) {
                let diff = curDiff;
                if (curDiff = 0) {
                    let notDone = false;
                }
            }
            let prev = cur;
            let cur = free_[-1];
        }

        if (cur = 0) {
            do Sys.error(6);
            return;
        }

        // TODO: redo this
        if (prev = 0) {
            let free_ = cur + allocSize;
            let free_[0] = free_[0] - allocSize;
            let cur[0] = allocSize;
            return cur + 1;
        }
        let node = cur + allocSize;
        let prev[1] = node;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(Array o) {
    }
}
