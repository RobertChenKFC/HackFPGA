function Math.init 2
push constant 15
call Array.new 1
pop static 0
push constant 15
call Array.new 1
pop static 1
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE55
push local 0
push constant 15
lt
not
if-goto END_WHILE55
push local 1
push static 0
push local 0
add
pop pointer 1
pop that 0
push local 0
push constant 1
add
pop local 0
push local 1
push local 1
add
pop local 1
goto WHILE55
label END_WHILE55
push constant 16384
neg
pop static 2
push static 2
push static 2
add
pop static 2
push constant 32767
pop static 3
push constant 16383
pop static 4
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto END_IF133
push argument 0
neg
return
label END_IF133
push argument 0
return
function Math.multiply 3
push constant 0
pop local 2
push argument 0
push constant 0
lt
not
if-goto END_IF134
push argument 0
neg
pop argument 0
push local 2
not
pop local 2
label END_IF134
push argument 1
push constant 0
lt
not
if-goto END_IF135
push argument 1
neg
pop argument 1
push local 2
not
pop local 2
label END_IF135
push constant 1
pop local 0
push constant 0
pop local 1
label WHILE56
push local 0
push constant 0
gt
not
if-goto END_WHILE56
push local 0
push argument 1
and
push constant 0
eq
not
not
if-goto END_IF136
push local 1
push argument 0
add
pop local 1
label END_IF136
push argument 0
push argument 0
add
pop argument 0
push local 0
push local 0
add
pop local 0
goto WHILE56
label END_WHILE56
push local 2
not
if-goto END_IF137
push local 1
neg
return
label END_IF137
push local 1
return
function Math.divide 5
push argument 1
push constant 0
eq
not
if-goto END_IF138
push constant 3
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF138
push constant 0
pop local 0
push constant 0
pop local 1
push argument 0
push constant 0
lt
not
if-goto END_IF139
push argument 0
neg
pop argument 0
push local 0
not
pop local 0
label END_IF139
push argument 1
push constant 0
lt
not
if-goto END_IF140
push argument 1
neg
pop argument 1
push local 0
not
pop local 0
label END_IF140
push argument 1
push static 2
eq
not
if-goto END_IF141
push argument 0
push static 2
eq
not
if-goto END_IF142
push constant 1
return
label END_IF142
push constant 0
return
label END_IF141
push argument 0
push static 2
eq
not
if-goto END_IF143
push argument 1
push constant 1
eq
not
if-goto END_IF144
push argument 0
return
label END_IF144
push static 3
pop argument 0
push constant 1
neg
pop local 1
label END_IF143
push argument 1
pop local 3
push constant 0
pop local 4
push constant 1
neg
pop local 2
label WHILE57
push local 4
push constant 15
lt
push local 2
and
not
if-goto END_WHILE57
push local 3
push static 1
push local 4
add
pop pointer 1
pop that 0
push local 4
push constant 1
add
pop local 4
push local 3
push static 4
gt
not
if-goto END_IF145
push constant 0
pop local 2
label END_IF145
push local 3
push local 3
add
pop local 3
goto WHILE57
label END_WHILE57
push constant 0
pop local 3
push local 4
push constant 1
sub
pop local 4
label WHILE58
push local 4
push constant 1
neg
gt
not
if-goto END_WHILE58
push argument 0
push static 1
push local 4
add
pop pointer 1
push that 0
lt
not
not
if-goto END_IF146
push local 3
push static 0
push local 4
add
pop pointer 1
push that 0
or
pop local 3
push argument 0
push static 1
push local 4
add
pop pointer 1
push that 0
sub
pop argument 0
label END_IF146
push local 4
push constant 1
sub
pop local 4
goto WHILE58
label END_WHILE58
push local 1
push argument 0
push constant 1
add
push argument 1
eq
and
not
if-goto END_IF147
push local 3
push constant 1
add
pop local 3
label END_IF147
push local 0
not
if-goto END_IF148
push local 3
neg
return
label END_IF148
push local 3
return
function Math.sqrt 4
push argument 0
push constant 0
lt
not
if-goto END_IF149
push constant 4
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF149
push constant 14
pop local 0
push constant 0
pop local 1
label WHILE59
push local 0
push constant 0
lt
not
not
if-goto END_WHILE59
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
or
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push local 2
lt
push local 3
push argument 0
gt
or
push local 3
push constant 0
lt
or
not
not
if-goto END_IF150
push local 2
pop local 1
label END_IF150
push local 0
push constant 1
sub
pop local 0
goto WHILE59
label END_WHILE59
push local 1
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto END_IF151
push argument 0
return
label END_IF151
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto END_IF152
push argument 0
return
label END_IF152
push argument 1
return
