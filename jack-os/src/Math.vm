function Math.init 2
push constant 15
call Array.new 1
pop static 0
push constant 15
call Array.new 1
pop static 1
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE0
push local 0
push constant 15
lt
not
if-goto END_WHILE0
push local 1
push static 0
push local 0
add
pop pointer 1
pop that 0
push local 0
push constant 1
add
pop local 0
push local 1
push local 1
add
pop local 1
goto WHILE0
label END_WHILE0
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto END_IF0
push argument 0
neg
return
label END_IF0
push argument 0
return
function Math.multiply 3
push constant 0
pop local 2
push argument 0
push constant 0
lt
not
if-goto END_IF1
push argument 0
neg
pop argument 0
push local 2
not
pop local 2
label END_IF1
push argument 1
push constant 0
lt
not
if-goto END_IF2
push argument 1
neg
pop argument 1
push local 2
not
pop local 2
label END_IF2
push constant 1
pop local 0
push constant 0
pop local 1
label WHILE1
push local 0
push constant 0
gt
not
if-goto END_WHILE1
push local 0
push argument 1
and
push constant 0
eq
not
not
if-goto END_IF3
push local 1
push argument 0
add
pop local 1
label END_IF3
push argument 0
push argument 0
add
pop argument 0
push local 0
push local 0
add
pop local 0
goto WHILE1
label END_WHILE1
push local 2
not
if-goto END_IF4
push local 1
neg
return
label END_IF4
push local 1
return
function Math.divide 5
push argument 1
push constant 0
eq
not
if-goto END_IF5
push constant 3
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF5
push constant 0
pop local 3
push argument 0
push constant 0
lt
not
if-goto END_IF6
push argument 0
neg
pop argument 0
push local 3
not
pop local 3
label END_IF6
push argument 1
push constant 0
lt
not
if-goto END_IF7
push argument 1
neg
pop argument 1
push local 3
not
pop local 3
label END_IF7
push constant 0
pop local 0
push argument 1
pop local 1
push constant 1
neg
pop local 4
label WHILE2
push local 0
push constant 15
lt
push local 4
and
not
if-goto END_WHILE2
push local 1
push static 1
push local 0
add
pop pointer 1
pop that 0
push local 0
push constant 1
add
pop local 0
push local 1
push local 1
add
pop local 1
push local 1
push argument 0
gt
push local 1
push constant 0
lt
or
not
if-goto END_IF8
push constant 0
pop local 4
label END_IF8
goto WHILE2
label END_WHILE2
push local 0
push constant 1
sub
pop local 0
push constant 0
pop local 1
push constant 0
pop local 2
label WHILE3
push local 0
push constant 0
lt
not
not
if-goto END_WHILE3
push local 2
push static 1
push local 0
add
pop pointer 1
push that 0
add
push argument 0
gt
not
not
if-goto END_IF9
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
or
pop local 1
push local 2
push static 1
push local 0
add
pop pointer 1
push that 0
add
pop local 2
label END_IF9
push local 0
push constant 1
sub
pop local 0
goto WHILE3
label END_WHILE3
push local 3
not
if-goto END_IF10
push local 1
neg
return
label END_IF10
push local 1
return
function Math.sqrt 4
push argument 0
push constant 0
lt
not
if-goto END_IF11
push constant 4
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF11
push constant 14
pop local 0
push constant 0
pop local 1
label WHILE4
push local 0
push constant 0
lt
not
not
if-goto END_WHILE4
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
or
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push local 2
lt
push local 3
push argument 0
gt
or
push local 3
push constant 0
lt
or
not
not
if-goto END_IF12
push local 2
pop local 1
label END_IF12
push local 0
push constant 1
sub
pop local 0
goto WHILE4
label END_WHILE4
push local 1
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto END_IF13
push argument 0
return
label END_IF13
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto END_IF14
push argument 0
return
label END_IF14
push argument 1
return
