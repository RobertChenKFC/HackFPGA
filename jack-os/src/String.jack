// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str_;
    field int len_, maxLen_;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        let len_ = 0;
        let maxLen_ = maxLength;
        if (maxLen_ < 0) {
            do Sys.error(14);
            return this;
        }
        if (~(maxLen_ = 0)) {
            let str_ = Memory.alloc(maxLen_);
        }
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (~(maxLen_ = 0)) {
            do Memory.deAlloc(str_);
        }
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return len_;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        if (~(j < maxLen_)) {
            do Sys.error(15);
            return 0;
        }
        return str_[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        if (~(j < maxLen_)) {
            do Sys.error(16);
            return;
        }
        let str_[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (~(len_ < maxLen_)) {
            do Sys.error(17);
            return this;
        }
        let str_[len_] = c;
        let len_ = len_ + 1;
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (~(len_ > 0)) {
            do Sys.error(18);
            return;
        }
        let len_ = len_ - 1;
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int i, ret;
        var bool neg;

        let i = 0;
        if (str_[0] = 45) {                          // '-' = 45
            let neg = true;
            let i = 1;
        }

        let ret = 0;
        while (i < len_) {
            let ret = ret * 10 + (str_[i] - 48);    // '0' = 48
            let i = i + 1;
        }

        if (neg) {
            return -ret;
        }
        return ret;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int i, j, t;

        if (val = 0) {
            let str_[0] = 48;                   // '0' = 48
            let len_ = 1;
            return;
        }

        if ((val < 0) & ((-val) < 0)) {
            // INT_MIN: -2147483648
            let str_[0] = 45;
            let str_[1] = 50;
            let str_[2] = 49;
            let str_[3] = 52;
            let str_[4] = 55;
            let str_[5] = 52;
            let str_[6] = 56;
            let str_[7] = 51;
            let str_[8] = 54;
            let str_[9] = 52;
            let str_[10] = 56;
            let len_ = 11;
            return;
        }

        let len_ = 0;
        let i = 0;
        if (val < 0) {
            let str_[0] = 45;                   // '-' = 45
            let val = -val;
            let i = 1;
            let len_ = 1;
        }

        while (~(val = 0)) {
            let t = val / 10;
            let str_[len_] = val - (t * 10) + 48;  // '0' = 48
            let val = t;
            let len_ = len_ + 1;
        }

        let j = len_ - 1;
        while (i < j) {
            let t = str_[i];
            let str_[i] = str_[j];
            let str_[j] = t;
            let i = i + 1;
            let j = j - 1;
        }

        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
