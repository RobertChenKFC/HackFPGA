function Screen.init 2
push constant 1
neg
pop static 0
push constant 16
call Array.new 1
pop static 1
push constant 16
call Array.new 1
pop static 2
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE18
push local 0
push constant 16
lt
not
if-goto END_WHILE18
push local 1
push static 1
push local 0
add
pop pointer 1
pop that 0
push local 1
not
push static 2
push local 0
add
pop pointer 1
pop that 0
push local 1
push local 1
add
pop local 1
push local 0
push constant 1
add
pop local 0
goto WHILE18
label END_WHILE18
push constant 16384
pop static 3
push constant 0
return
function Screen.clearScreen 1
push constant 0
pop local 0
label WHILE19
push local 0
push constant 8192
lt
not
if-goto END_WHILE19
push constant 0
push static 3
push local 0
add
pop pointer 1
pop that 0
push local 0
push constant 1
add
pop local 0
goto WHILE19
label END_WHILE19
push constant 0
return
function Screen.setColor 0
push argument 0
pop static 0
push constant 0
return
function Screen.drawPixel 3
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
not
if-goto END_IF77
push constant 7
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF77
push argument 0
push constant 16
call Math.divide 2
pop local 0
push argument 0
push local 0
push constant 16
call Math.multiply 2
sub
pop local 1
push argument 1
push constant 32
call Math.multiply 2
push local 0
add
pop local 2
push static 0
not
if-goto ELSE78
push static 3
push local 2
add
pop pointer 1
push that 0
push static 1
push local 1
add
pop pointer 1
push that 0
or
push static 3
push local 2
add
pop pointer 1
pop that 0
goto END_IF78
label ELSE78
push static 3
push local 2
add
pop pointer 1
push that 0
push static 2
push local 1
add
pop pointer 1
push that 0
and
push static 3
push local 2
add
pop pointer 1
pop that 0
label END_IF78
push constant 0
return
function Screen.drawLine 8
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
push argument 2
push constant 0
lt
or
push argument 2
push constant 511
gt
or
push argument 3
push constant 0
lt
or
push argument 3
push constant 255
gt
or
not
if-goto END_IF79
push constant 8
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF79
push argument 2
push argument 0
sub
pop local 1
push argument 3
push argument 1
sub
pop local 2
push constant 0
pop local 7
push argument 1
push argument 3
eq
not
if-goto END_IF80
push local 1
push constant 0
lt
not
if-goto END_IF81
push argument 0
pop local 0
push argument 2
pop argument 0
push local 0
pop argument 2
label END_IF81
push argument 0
push constant 16
call Math.divide 2
pop local 3
push argument 0
push local 3
push constant 16
call Math.multiply 2
sub
pop local 4
push argument 2
push constant 16
call Math.divide 2
pop local 5
push local 3
push local 5
eq
not
if-goto ELSE82
push argument 2
push local 5
push constant 16
call Math.multiply 2
sub
pop local 6
goto END_IF82
label ELSE82
push constant 16
pop local 6
label END_IF82
push argument 1
push constant 32
call Math.multiply 2
push local 3
add
pop local 0
label WHILE20
push local 4
push constant 0
eq
push local 4
push local 6
eq
or
not
not
if-goto END_WHILE20
push static 0
not
if-goto ELSE83
push static 3
push local 0
add
pop pointer 1
push that 0
push static 1
push local 4
add
pop pointer 1
push that 0
or
push static 3
push local 0
add
pop pointer 1
pop that 0
goto END_IF83
label ELSE83
push static 3
push local 0
add
pop pointer 1
push that 0
push static 2
push local 4
add
pop pointer 1
push that 0
and
push static 3
push local 0
add
pop pointer 1
pop that 0
label END_IF83
push local 4
push constant 1
add
pop local 4
goto WHILE20
label END_WHILE20
push local 3
push local 5
eq
not
if-goto END_IF84
push constant 0
return
label END_IF84
push local 4
push constant 16
eq
not
if-goto END_IF85
push local 3
push constant 1
add
pop local 3
push local 0
push constant 1
add
pop local 0
label END_IF85
push argument 2
push local 5
push constant 16
call Math.multiply 2
sub
pop local 6
label WHILE21
push local 3
push local 5
lt
not
if-goto END_WHILE21
push static 0
not
if-goto ELSE86
push constant 1
neg
push static 3
push local 0
add
pop pointer 1
pop that 0
goto END_IF86
label ELSE86
push constant 0
push static 3
push local 0
add
pop pointer 1
pop that 0
label END_IF86
push local 0
push constant 1
add
pop local 0
push local 3
push constant 1
add
pop local 3
goto WHILE21
label END_WHILE21
push constant 0
pop local 4
label WHILE22
push local 4
push local 6
gt
not
not
if-goto END_WHILE22
push static 0
not
if-goto ELSE87
push static 3
push local 0
add
pop pointer 1
push that 0
push static 1
push local 4
add
pop pointer 1
push that 0
or
push static 3
push local 0
add
pop pointer 1
pop that 0
goto END_IF87
label ELSE87
push static 3
push local 0
add
pop pointer 1
push that 0
push static 2
push local 4
add
pop pointer 1
push that 0
and
push static 3
push local 0
add
pop pointer 1
pop that 0
label END_IF87
push local 4
push constant 1
add
pop local 4
goto WHILE22
label END_WHILE22
push constant 0
return
label END_IF80
push argument 0
push argument 2
eq
not
if-goto END_IF88
push local 2
push constant 0
lt
not
if-goto END_IF89
push argument 1
pop local 0
push argument 3
pop argument 1
push local 0
pop argument 3
label END_IF89
push argument 0
push constant 16
call Math.divide 2
pop local 3
push argument 0
push local 3
push constant 16
call Math.multiply 2
sub
pop local 4
push argument 1
push constant 32
call Math.multiply 2
push local 3
add
pop local 0
push static 0
not
if-goto ELSE90
push static 1
push local 4
add
pop pointer 1
push that 0
pop local 5
label WHILE23
push argument 1
push argument 3
gt
not
not
if-goto END_WHILE23
push static 3
push local 0
add
pop pointer 1
push that 0
push local 5
or
push static 3
push local 0
add
pop pointer 1
pop that 0
push argument 1
push constant 1
add
pop argument 1
push local 0
push constant 32
add
pop local 0
goto WHILE23
label END_WHILE23
goto END_IF90
label ELSE90
push static 2
push local 4
add
pop pointer 1
push that 0
pop local 5
label WHILE24
push argument 1
push argument 3
gt
not
not
if-goto END_WHILE24
push static 3
push local 0
add
pop pointer 1
push that 0
push local 5
and
push static 3
push local 0
add
pop pointer 1
pop that 0
push argument 1
push constant 1
add
pop argument 1
push local 0
push constant 32
add
pop local 0
goto WHILE24
label END_WHILE24
label END_IF90
push constant 0
return
label END_IF88
push local 1
push constant 0
lt
not
if-goto END_IF91
push argument 2
pop argument 0
push argument 3
pop argument 1
push local 1
neg
pop local 1
push local 2
neg
pop local 2
label END_IF91
push constant 0
pop local 3
push constant 0
pop local 4
push constant 0
pop local 7
push local 2
push constant 0
gt
not
if-goto ELSE92
label WHILE25
push local 3
push local 1
gt
push local 4
push local 2
gt
or
not
not
if-goto END_WHILE25
push argument 0
push local 3
add
push argument 1
push local 4
add
call Screen.drawPixel 2
pop temp 0
push local 7
push constant 0
lt
not
if-goto ELSE93
push local 4
push constant 1
add
pop local 4
push local 7
push local 1
add
pop local 7
goto END_IF93
label ELSE93
push local 3
push constant 1
add
pop local 3
push local 7
push local 2
sub
pop local 7
label END_IF93
goto WHILE25
label END_WHILE25
goto END_IF92
label ELSE92
push local 2
neg
pop local 2
label WHILE26
push local 3
push local 1
gt
push local 4
push local 2
gt
or
not
not
if-goto END_WHILE26
push argument 0
push local 3
add
push argument 1
push local 4
add
call Screen.drawPixel 2
pop temp 0
push local 7
push constant 0
lt
not
if-goto ELSE94
push local 3
push constant 1
add
pop local 3
push local 7
push local 2
add
pop local 7
goto END_IF94
label ELSE94
push local 4
push constant 1
sub
pop local 4
push local 7
push local 1
sub
pop local 7
label END_IF94
goto WHILE26
label END_WHILE26
label END_IF92
push constant 0
return
function Screen.drawRectangle 2
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
push argument 2
push constant 0
lt
or
push argument 2
push constant 511
gt
or
push argument 3
push constant 0
lt
or
push argument 3
push constant 255
gt
or
not
if-goto END_IF95
push constant 9
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF95
push argument 2
push argument 0
sub
pop local 0
push local 0
push constant 0
lt
not
if-goto END_IF96
push local 0
neg
pop local 0
label END_IF96
push argument 3
push argument 1
sub
pop local 1
push local 1
push constant 0
lt
not
if-goto END_IF97
push local 1
neg
pop local 1
label END_IF97
push local 1
push local 1
add
pop local 1
push local 1
push local 1
add
pop local 1
push local 1
push local 1
add
pop local 1
push local 0
push local 1
gt
not
if-goto ELSE98
push argument 1
push argument 3
lt
not
if-goto ELSE99
push constant 1
pop local 1
push argument 3
push constant 1
add
pop argument 3
goto END_IF99
label ELSE99
push constant 1
neg
pop local 1
push argument 3
push constant 1
sub
pop argument 3
label END_IF99
label WHILE27
push argument 1
push argument 3
eq
not
not
if-goto END_WHILE27
push argument 0
push argument 1
push argument 2
push argument 1
call Screen.drawLine 4
pop temp 0
push argument 1
push local 1
add
pop argument 1
goto WHILE27
label END_WHILE27
goto END_IF98
label ELSE98
push argument 0
push argument 2
lt
not
if-goto ELSE100
push constant 1
pop local 0
push argument 2
push constant 1
add
pop argument 2
goto END_IF100
label ELSE100
push constant 1
neg
pop local 0
push argument 2
push constant 1
sub
pop argument 2
label END_IF100
label WHILE28
push argument 0
push argument 2
eq
not
not
if-goto END_WHILE28
push argument 0
push argument 1
push argument 0
push argument 3
call Screen.drawLine 4
pop temp 0
push argument 0
push local 0
add
pop argument 0
goto WHILE28
label END_WHILE28
label END_IF98
push constant 0
return
function Screen.drawCircle 3
push argument 0
push constant 0
lt
push argument 0
push constant 511
gt
or
push argument 1
push constant 0
lt
or
push argument 1
push constant 255
gt
or
not
if-goto END_IF101
push constant 12
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF101
push argument 2
push constant 0
lt
push argument 2
push constant 181
gt
or
not
if-goto END_IF102
push constant 13
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF102
push argument 2
push constant 0
eq
not
if-goto END_IF103
push constant 0
return
label END_IF103
push argument 2
pop local 0
push constant 0
pop local 1
push constant 1
push argument 2
sub
pop local 2
push argument 0
push local 0
sub
push argument 1
push local 1
sub
push argument 0
push local 0
add
push argument 1
push local 1
sub
call Screen.drawLine 4
pop temp 0
push argument 0
push local 0
sub
push argument 1
push local 1
add
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawLine 4
pop temp 0
label WHILE29
push local 0
push local 1
gt
not
if-goto END_WHILE29
push local 1
push constant 1
add
pop local 1
push local 2
push constant 0
gt
not
if-goto ELSE104
push local 0
push constant 1
sub
pop local 0
push local 2
push local 1
add
push local 1
add
push local 0
sub
push local 0
sub
push constant 1
add
pop local 2
goto END_IF104
label ELSE104
push local 2
push local 1
add
push local 1
add
push constant 1
add
pop local 2
label END_IF104
push argument 0
push local 0
sub
push argument 1
push local 1
sub
push argument 0
push local 0
add
push argument 1
push local 1
sub
call Screen.drawLine 4
pop temp 0
push argument 0
push local 0
sub
push argument 1
push local 1
add
push argument 0
push local 0
add
push argument 1
push local 1
add
call Screen.drawLine 4
pop temp 0
push argument 0
push local 1
sub
push argument 1
push local 0
sub
push argument 0
push local 1
add
push argument 1
push local 0
sub
call Screen.drawLine 4
pop temp 0
push argument 0
push local 1
sub
push argument 1
push local 0
add
push argument 0
push local 1
add
push argument 1
push local 0
add
call Screen.drawLine 4
pop temp 0
goto WHILE29
label END_WHILE29
push constant 0
return
