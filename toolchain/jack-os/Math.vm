function Math.init 2
push constant 31
call Array.new 1
pop static 0
push constant 31
call Array.new 1
pop static 1
push constant 0
pop local 0
push constant 1
pop local 1
label WHILE6
push local 0
push constant 31
lt
not
if-goto END_WHILE6
push local 1
push static 0
push local 0
add
pop pointer 1
pop that 0
push local 0
push constant 1
add
pop local 0
push local 1
push local 1
add
pop local 1
goto WHILE6
label END_WHILE6
push constant 1073741824
neg
pop static 2
push static 2
push static 2
add
pop static 2
push constant 2147483647
pop static 3
push constant 1073741823
pop static 4
push constant 0
return
function Math.abs 0
push argument 0
push constant 0
lt
not
if-goto END_IF30
push argument 0
neg
return
label END_IF30
push argument 0
return
function Math.multiply 3
push constant 0
pop local 2
push argument 0
push constant 0
lt
not
if-goto END_IF31
push argument 0
neg
pop argument 0
push local 2
not
pop local 2
label END_IF31
push argument 1
push constant 0
lt
not
if-goto END_IF32
push argument 1
neg
pop argument 1
push local 2
not
pop local 2
label END_IF32
push constant 1
pop local 0
push constant 0
pop local 1
label WHILE7
push local 0
push constant 0
gt
not
if-goto END_WHILE7
push local 0
push argument 1
and
push constant 0
eq
not
not
if-goto END_IF33
push local 1
push argument 0
add
pop local 1
label END_IF33
push argument 0
push argument 0
add
pop argument 0
push local 0
push local 0
add
pop local 0
goto WHILE7
label END_WHILE7
push local 2
not
if-goto END_IF34
push local 1
neg
return
label END_IF34
push local 1
return
function Math.divide 5
push argument 1
push constant 0
eq
not
if-goto END_IF35
push constant 3
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF35
push constant 0
pop local 0
push constant 0
pop local 1
push argument 0
push constant 0
lt
not
if-goto END_IF36
push argument 0
neg
pop argument 0
push local 0
not
pop local 0
label END_IF36
push argument 1
push constant 0
lt
not
if-goto END_IF37
push argument 1
neg
pop argument 1
push local 0
not
pop local 0
label END_IF37
push argument 1
push static 2
eq
not
if-goto END_IF38
push argument 0
push static 2
eq
not
if-goto END_IF39
push constant 1
return
label END_IF39
push constant 0
return
label END_IF38
push argument 0
push static 2
eq
not
if-goto END_IF40
push argument 1
push constant 1
eq
not
if-goto END_IF41
push argument 0
return
label END_IF41
push static 3
pop argument 0
push constant 1
neg
pop local 1
label END_IF40
push argument 1
pop local 3
push constant 0
pop local 4
push constant 1
neg
pop local 2
label WHILE8
push local 4
push constant 31
lt
push local 2
and
not
if-goto END_WHILE8
push local 3
push static 1
push local 4
add
pop pointer 1
pop that 0
push local 4
push constant 1
add
pop local 4
push local 3
push static 4
gt
not
if-goto END_IF42
push constant 0
pop local 2
label END_IF42
push local 3
push local 3
add
pop local 3
goto WHILE8
label END_WHILE8
push constant 0
pop local 3
push local 4
push constant 1
sub
pop local 4
label WHILE9
push local 4
push constant 1
neg
gt
not
if-goto END_WHILE9
push argument 0
push static 1
push local 4
add
pop pointer 1
push that 0
lt
not
not
if-goto END_IF43
push local 3
push static 0
push local 4
add
pop pointer 1
push that 0
or
pop local 3
push argument 0
push static 1
push local 4
add
pop pointer 1
push that 0
sub
pop argument 0
label END_IF43
push local 4
push constant 1
sub
pop local 4
goto WHILE9
label END_WHILE9
push local 1
push argument 0
push constant 1
add
push argument 1
eq
and
not
if-goto END_IF44
push local 3
push constant 1
add
pop local 3
label END_IF44
push local 0
not
if-goto END_IF45
push local 3
neg
return
label END_IF45
push local 3
return
function Math.sqrt 4
push argument 0
push constant 0
lt
not
if-goto END_IF46
push constant 4
call Sys.error 1
pop temp 0
push constant 0
return
label END_IF46
push constant 30
pop local 0
push constant 0
pop local 1
label WHILE10
push local 0
push constant 0
lt
not
not
if-goto END_WHILE10
push local 1
push static 0
push local 0
add
pop pointer 1
push that 0
or
pop local 2
push local 2
push local 2
call Math.multiply 2
pop local 3
push local 3
push local 2
lt
push local 3
push argument 0
gt
or
push local 3
push constant 0
lt
or
not
not
if-goto END_IF47
push local 2
pop local 1
label END_IF47
push local 0
push constant 1
sub
pop local 0
goto WHILE10
label END_WHILE10
push local 1
return
function Math.max 0
push argument 0
push argument 1
gt
not
if-goto END_IF48
push argument 0
return
label END_IF48
push argument 1
return
function Math.min 0
push argument 0
push argument 1
lt
not
if-goto END_IF49
push argument 0
return
label END_IF49
push argument 1
return
